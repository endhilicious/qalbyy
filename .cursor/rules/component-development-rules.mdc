# Component Development Rules

## üéØ CRITICAL: Component Structure dan Organization

### Reusable Component Folder Structure
**WAJIB DILAKUKAN:** Setiap component yang berpotensi reusable, **HARUS** dibuat dengan struktur folder lengkap:

```
/NamaComponent
‚îú‚îÄ‚îÄ NamaComponent.tsx    # Component utama
‚îú‚îÄ‚îÄ index.ts            # Export file
‚îú‚îÄ‚îÄ dataMock.ts         # Mock data (jika diperlukan)
‚îî‚îÄ‚îÄ README.md           # Documentation lengkap
```

### Component Documentation Requirements
**README.md harus berisi:**
- Deskripsi component dan kegunaannya
- Props interface dengan contoh penggunaan
- Contoh implementasi (usage examples)
- Dependencies dan requirements
- Notes penting untuk developer

### Component Export Pattern
```tsx
// ‚úÖ CORRECT - index.ts export pattern
export { default as NamaComponent } from './NamaComponent'
export type { NamaComponentProps } from './NamaComponent'

// ‚úÖ CORRECT - Component dengan proper typing
interface NamaComponentProps {
  title: string
  description?: string
  onAction?: () => void
  variant?: 'primary' | 'secondary'
  disabled?: boolean
  className?: string
}

export const NamaComponent: React.FC<NamaComponentProps> = ({
  title,
  description,
  onAction,
  variant = 'primary',
  disabled = false,
  className = ''
}) => {
  // Implementation
}
```

## Component Design Principles

### 1. Single Responsibility
- Setiap component **HANYA** punya satu tanggung jawab
- Jika component terlalu kompleks, breakdown menjadi sub-components
- Gunakan composition pattern untuk flexibility

### 2. Props Interface Design
```tsx
// ‚úÖ CORRECT - Props dengan default values dan optional
interface ButtonProps {
  children: React.ReactNode
  variant?: 'primary' | 'secondary' | 'danger' | 'ghost'
  size?: 'sm' | 'md' | 'lg'
  disabled?: boolean
  loading?: boolean
  onClick?: () => void
  className?: string
  type?: 'button' | 'submit' | 'reset'
}

// ‚úÖ CORRECT - Component dengan proper default handling
export const Button: React.FC<ButtonProps> = ({
  children,
  variant = 'primary',
  size = 'md',
  disabled = false,
  loading = false,
  onClick,
  className = '',
  type = 'button'
}) => {
  // Implementation
}
```

### 3. Component Composition
```tsx
// ‚úÖ CORRECT - Composition pattern untuk flexibility
interface CardProps {
  children: React.ReactNode
  className?: string
}

interface CardHeaderProps {
  children: React.ReactNode
  className?: string
}

interface CardBodyProps {
  children: React.ReactNode
  className?: string
}

export const Card: React.FC<CardProps> & {
  Header: React.FC<CardHeaderProps>
  Body: React.FC<CardBodyProps>
} = ({ children, className = '' }) => (
  <div className={`bg-white rounded-lg shadow ${className}`}>
    {children}
  </div>
)

Card.Header = ({ children, className = '' }) => (
  <div className={`px-6 py-4 border-b border-gray-200 ${className}`}>
    {children}
  </div>
)

Card.Body = ({ children, className = '' }) => (
  <div className={`px-6 py-4 ${className}`}>
    {children}
  </div>
)
```

## Component Testing Requirements

### Test File Structure
```tsx
// ‚úÖ CORRECT - Test file naming dan structure
// Component: src/components/Button/Button.tsx
// Test: src/components/Button/Button.test.tsx

describe('Button', () => {
  const defaultProps = {
    children: 'Click me',
    onClick: jest.fn()
  }

  it('renders with correct text', () => {
    render(<Button {...defaultProps} />)
    expect(screen.getByText('Click me')).toBeInTheDocument()
  })

  it('applies variant classes correctly', () => {
    render(<Button {...defaultProps} variant="danger" />)
    const button = screen.getByRole('button')
    expect(button).toHaveClass('bg-red-600')
  })
})
```

## Component Styling Guidelines

### Tailwind CSS Usage
- **Mobile-First:** Mulai dari mobile, kemudian scale up
- **Consistent Spacing:** Gunakan spacing scale yang konsisten (4, 6, 8, 12, 16, 20, 24, 32, 48, 64)
- **Responsive Design:** Implementasikan responsive breakpoints dengan proper
- **Color Consistency:** Gunakan color palette yang sudah didefinisikan

### Style Organization
```tsx
// ‚úÖ CORRECT - Style organization dengan logical grouping
const getVariantClasses = (variant: ButtonVariant) => {
  const baseClasses = 'px-4 py-2 rounded-md font-medium transition-colors'
  
  switch (variant) {
    case 'primary':
      return `${baseClasses} bg-blue-600 text-white hover:bg-blue-700 focus:ring-2 focus:ring-blue-500`
    case 'secondary':
      return `${baseClasses} bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-2 focus:ring-gray-500`
    case 'danger':
      return `${baseClasses} bg-red-600 text-white hover:bg-red-700 focus:ring-2 focus:ring-red-500`
    default:
      return baseClasses
  }
}
```

## Component State Management

### Local State Pattern
```tsx
// ‚úÖ CORRECT - Local state dengan proper typing
const [isOpen, setIsOpen] = useState(false)
const [selectedValue, setSelectedValue] = useState<string | null>(null)
const [loading, setLoading] = useState(false)

// ‚úÖ CORRECT - State update dengan proper validation
const handleValueChange = (value: string) => {
  if (value && value.trim()) {
    setSelectedValue(value.trim())
  }
}
```

### Custom Hooks Integration
```tsx
// ‚úÖ CORRECT - Component menggunakan custom hooks
export const UserList = () => {
  const { users, loading, error, fetchUsers } = useUsers()
  const { deleteUser } = useUserActions()

  if (loading) return <LoadingSpinner />
  if (error) return <ErrorMessage message={error} onRetry={fetchUsers} />

  return (
    <div className="space-y-4">
      {users.map(user => (
        <UserCard 
          key={user.id} 
          user={user} 
          onDelete={() => deleteUser(user.id)}
        />
      ))}
    </div>
  )
}
```

## Component Accessibility

### ARIA Labels dan Roles
```tsx
// ‚úÖ CORRECT - Proper accessibility implementation
<button
  aria-label="Close modal"
  aria-expanded={isOpen}
  onClick={handleClose}
  className="..."
>
  <XIcon className="h-5 w-5" />
</button>

// ‚úÖ CORRECT - Form accessibility
<label htmlFor="email" className="block text-sm font-medium text-gray-700">
  Email Address
</label>
<input
  id="email"
  type="email"
  aria-describedby="email-help"
  className="..."
/>
<p id="email-help" className="text-sm text-gray-500">
  We'll never share your email with anyone else.
</p>
```

## Component Performance

### Memoization Strategy
```tsx
// ‚úÖ CORRECT - Memoization untuk expensive operations
const expensiveValue = useMemo(() => {
  return heavyCalculation(data)
}, [data])

// ‚úÖ CORRECT - Callback memoization
const handleClick = useCallback(() => {
  onAction(id)
}, [onAction, id])

// ‚úÖ CORRECT - Component memoization
export const ExpensiveComponent = React.memo<ExpensiveComponentProps>(({ data }) => {
  // Implementation
})
```

## What NOT to Do

‚ùå **Don't create components without proper folder structure**
‚ùå **Don't skip documentation in README.md**
‚ùå **Don't use inline styles instead of Tailwind classes**
‚ùå **Don't create components that are too specific to one use case**
‚ùå **Don't forget to handle loading and error states**
‚ùå **Don't ignore accessibility requirements**

## What TO Do

‚úÖ **Always create proper folder structure for reusable components**
‚úÖ **Write comprehensive documentation in README.md**
‚úÖ **Use TypeScript interfaces for all props**
‚úÖ **Implement proper error handling and loading states**
‚úÖ **Follow mobile-first responsive design**
‚úÖ **Test all component variations**
‚úÖ **Use consistent styling patterns**

**‚ö†Ô∏è FAILURE TO FOLLOW THESE RULES WILL RESULT IN:**
- Poor component organization
- Difficult maintenance
- Inconsistent user experience
- Code review rejection
description:
globs:
alwaysApply: false
---
